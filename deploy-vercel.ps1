#!/usr/bin/env pwsh
# ===========================================
# SCRIPT DE DEPLOY AUTOMATIZADO PARA VERCEL
# SaaS Controle Financeiro
# ===========================================

Write-Host "üöÄ Iniciando deploy para Vercel..." -ForegroundColor Green
Write-Host "" 

# Verificar se estamos em um reposit√≥rio Git
if (-not (Test-Path ".git")) {
    Write-Host "‚ùå Erro: Este diret√≥rio n√£o √© um reposit√≥rio Git!" -ForegroundColor Red
    Write-Host "Execute: git init" -ForegroundColor Yellow
    exit 1
}

# Verificar se h√° mudan√ßas n√£o commitadas
$gitStatus = git status --porcelain
if ($gitStatus) {
    Write-Host "üìù Detectadas mudan√ßas n√£o commitadas..." -ForegroundColor Yellow
    Write-Host "Arquivos modificados:"
    git status --short
    Write-Host ""
    
    $commit = Read-Host "Deseja fazer commit das mudan√ßas? (s/N)"
    if ($commit -eq "s" -or $commit -eq "S") {
        $message = Read-Host "Digite a mensagem do commit"
        if (-not $message) {
            $message = "Deploy to Vercel - $(Get-Date -Format 'yyyy-MM-dd HH:mm')"
        }
        
        Write-Host "üì¶ Fazendo commit..." -ForegroundColor Blue
        git add .
        git commit -m "$message"
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Erro ao fazer commit!" -ForegroundColor Red
            exit 1
        }
    } else {
        Write-Host "‚ö†Ô∏è  Continuando sem commit..." -ForegroundColor Yellow
    }
}

# Verificar branch atual
$currentBranch = git branch --show-current
Write-Host "üìç Branch atual: $currentBranch" -ForegroundColor Cyan

if ($currentBranch -ne "main" -and $currentBranch -ne "master") {
    Write-Host "‚ö†Ô∏è  Voc√™ n√£o est√° na branch main/master!" -ForegroundColor Yellow
    $continue = Read-Host "Deseja continuar mesmo assim? (s/N)"
    if ($continue -ne "s" -and $continue -ne "S") {
        Write-Host "‚ùå Deploy cancelado!" -ForegroundColor Red
        exit 1
    }
}

# Push para o reposit√≥rio
Write-Host "üì§ Fazendo push para o reposit√≥rio..." -ForegroundColor Blue
git push origin $currentBranch

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ùå Erro ao fazer push!" -ForegroundColor Red
    Write-Host "Verifique se o reposit√≥rio remoto est√° configurado corretamente." -ForegroundColor Yellow
    exit 1
}

# Verificar se o Vercel CLI est√° instalado
Write-Host "üîç Verificando Vercel CLI..." -ForegroundColor Blue
$vercelInstalled = Get-Command vercel -ErrorAction SilentlyContinue

if (-not $vercelInstalled) {
    Write-Host "‚ö†Ô∏è  Vercel CLI n√£o encontrado!" -ForegroundColor Yellow
    $install = Read-Host "Deseja instalar o Vercel CLI? (s/N)"
    if ($install -eq "s" -or $install -eq "S") {
        Write-Host "üì¶ Instalando Vercel CLI..." -ForegroundColor Blue
        npm install -g vercel
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Erro ao instalar Vercel CLI!" -ForegroundColor Red
            exit 1
        }
    } else {
        Write-Host "‚ÑπÔ∏è  Voc√™ pode instalar manualmente com: npm install -g vercel" -ForegroundColor Cyan
        Write-Host "üìñ Consulte o arquivo DEPLOY_VERCEL.md para instru√ß√µes completas." -ForegroundColor Cyan
        exit 0
    }
}

# Verificar se est√° logado no Vercel
Write-Host "üîê Verificando autentica√ß√£o no Vercel..." -ForegroundColor Blue
$vercelAuth = vercel whoami 2>$null

if ($LASTEXITCODE -ne 0) {
    Write-Host "‚ö†Ô∏è  N√£o est√° logado no Vercel!" -ForegroundColor Yellow
    $login = Read-Host "Deseja fazer login agora? (s/N)"
    if ($login -eq "s" -or $login -eq "S") {
        Write-Host "üîë Fazendo login no Vercel..." -ForegroundColor Blue
        vercel login
        
        if ($LASTEXITCODE -ne 0) {
            Write-Host "‚ùå Erro ao fazer login!" -ForegroundColor Red
            exit 1
        }
    } else {
        Write-Host "‚ÑπÔ∏è  Voc√™ pode fazer login manualmente com: vercel login" -ForegroundColor Cyan
        exit 0
    }
} else {
    Write-Host "‚úÖ Logado como: $vercelAuth" -ForegroundColor Green
}

# Verificar arquivos de configura√ß√£o
Write-Host "üìã Verificando arquivos de configura√ß√£o..." -ForegroundColor Blue

$configFiles = @(
    "vercel.json",
    "frontend/package.json",
    "backend/requirements.txt",
    "backend/main.py"
)

$missingFiles = @()
foreach ($file in $configFiles) {
    if (-not (Test-Path $file)) {
        $missingFiles += $file
    }
}

if ($missingFiles.Count -gt 0) {
    Write-Host "‚ùå Arquivos de configura√ß√£o em falta:" -ForegroundColor Red
    foreach ($file in $missingFiles) {
        Write-Host "   - $file" -ForegroundColor Red
    }
    Write-Host "üìñ Consulte o arquivo DEPLOY_VERCEL.md para instru√ß√µes." -ForegroundColor Yellow
    exit 1
}

Write-Host "‚úÖ Todos os arquivos de configura√ß√£o encontrados!" -ForegroundColor Green

# Fazer deploy
Write-Host "" 
Write-Host "üöÄ Iniciando deploy no Vercel..." -ForegroundColor Green
Write-Host "" 

# Verificar se j√° existe um projeto
$existingProject = vercel ls 2>$null | Select-String (Split-Path -Leaf (Get-Location))

if ($existingProject) {
    Write-Host "üì¶ Projeto existente encontrado. Fazendo deploy..." -ForegroundColor Blue
    vercel --prod
} else {
    Write-Host "üÜï Novo projeto. Configurando..." -ForegroundColor Blue
    vercel --prod
}

if ($LASTEXITCODE -eq 0) {
    Write-Host "" 
    Write-Host "üéâ Deploy conclu√≠do com sucesso!" -ForegroundColor Green
    Write-Host "" 
    
    # Obter URL do projeto
    $projectUrl = vercel ls --scope $(vercel whoami) | Select-String "https://" | ForEach-Object { $_.ToString().Trim() }
    
    if ($projectUrl) {
        Write-Host "üåê URL da aplica√ß√£o: $projectUrl" -ForegroundColor Cyan
        Write-Host "" 
    }
    
    Write-Host "üìä Pr√≥ximos passos:" -ForegroundColor Yellow
    Write-Host "   1. Configurar vari√°veis de ambiente no painel do Vercel" -ForegroundColor White
    Write-Host "   2. Configurar banco de dados Neon" -ForegroundColor White
    Write-Host "   3. Testar a aplica√ß√£o" -ForegroundColor White
    Write-Host "   4. Configurar dom√≠nio personalizado (opcional)" -ForegroundColor White
    Write-Host "" 
    Write-Host "üìñ Consulte DEPLOY_VERCEL.md para instru√ß√µes detalhadas." -ForegroundColor Cyan
    
} else {
    Write-Host "" 
    Write-Host "‚ùå Erro durante o deploy!" -ForegroundColor Red
    Write-Host "" 
    Write-Host "üîç Poss√≠veis solu√ß√µes:" -ForegroundColor Yellow
    Write-Host "   1. Verificar logs no painel do Vercel" -ForegroundColor White
    Write-Host "   2. Verificar configura√ß√µes no vercel.json" -ForegroundColor White
    Write-Host "   3. Verificar vari√°veis de ambiente" -ForegroundColor White
    Write-Host "   4. Consultar DEPLOY_VERCEL.md" -ForegroundColor White
    Write-Host "" 
    exit 1
}

Write-Host "" 
Write-Host "‚ú® Script de deploy finalizado!" -ForegroundColor Green
Write-Host ""